substitutions:
  i2c_frequency: 50Hz

esphome:
  includes:
    - common/aqi.h

defaults:
  update_interval: 1s
  i2c_address: "0x12"
  i2c_bus_id: bus_a
  throttle_average: 15s

sensor:
  # Raw sensor values updated at 1s, but kept internal to be used for
  # template sensor values exposed to HA
  - platform: pmsa003i
    id: pmsa003i_sensor
    i2c_id: ${i2c_bus_id}
    address: ${i2c_address}
    pm_1_0:
      id: pm_1_0_raw
    pm_2_5:
      id: pm_2_5_raw
    pm_10_0:
      id: pm_10_raw
#     pmc_0_3:
#       id: pmc_0_3_raw
# #      name: "PMC <0.3µm"
#     pmc_0_5:
#       id: pcm_0_5_raw
# #      name: "PMC <0.5µm"
#     pmc_1_0:
#       id: pmc_1_0_raw
# #      name: "PMC <1µm"
#     pmc_2_5:
#       id: pmc_2_5_raw
# #      name: "PMC <2.5µm"
#     pmc_5_0:
#       id: pmc_5_0_raw
# #      name: "PMC <5µm"
#     pmc_10_0:
#       id: pmc_10_0_raw
# #      name: "PMC <10µm"
    update_interval: ${update_interval}


  - platform: template
    name: "PM1.0"
    id: pm_1_0
    device_class: PM1
    unit_of_measurement: µg/m³
    state_class: measurement
    icon: mdi:grain

    update_interval: ${update_interval}
    filters:
      - throttle_average: ${throttle_average}
      - filter_out: nan
      # - sliding_window_moving_average:
      #     window_size: 15
      #     send_every: 15
      #     send_first_at: 15
    lambda: "return(id(pm_1_0_raw).state);"
  - platform: template
    name: "PM2.5"
    id: pm_2_5
    device_class: PM25
    icon: mdi:smoke
    unit_of_measurement: µg/m³
    state_class: measurement
    update_interval: ${update_interval}
    filters:
      - throttle_average: ${throttle_average}
      - filter_out: nan
      # - sliding_window_moving_average:
      #     window_size: 15
      #     send_every: 15
      #     send_first_at: 15
    lambda: "return(id(pm_2_5_raw).state);"
  - platform: template
    name: "PM10.0"
    id: pm_10
    device_class: PM10
    icon: mdi:flower-pollen
    unit_of_measurement: µg/m³
    state_class: measurement
    update_interval: ${update_interval}
    filters:
      - throttle_average: ${throttle_average}
      - filter_out: nan
      # - sliding_window_moving_average:
      #     window_size: 15
      #     send_every: 15
      #     send_first_at: 15
    lambda: "return(id(pm_10_raw).state);"
  - platform: template
    name: "AQI"
    id: aqi
    device_class: AQI
    state_class: measurement
    icon: mdi:weather-hazy
    accuracy_decimals: 0
    filters:
      - clamp:
          min_value: 0.0
          max_value: 500
      - throttle_average: ${throttle_average}
      - filter_out: nan
      # - sliding_window_moving_average:
      #     window_size: 15
      #     send_every: 15
      #     send_first_at: 15
    lambda: |-
      float pm2_5 = id(pm_2_5_raw).state;
      float pm10 = id(pm_10_raw).state;
      if (pm2_5 != pm2_5) pm2_5 = 0.0;
      if (pm10 != pm10) pm10 = 0.0;
      float aqi2_5 = get_pm2_5_aqi(pm2_5);
      float aqi10 = get_pm10_aqi(pm10);
      float aqi = aqi2_5 > aqi10 ? aqi2_5 : aqi10;
      ESP_LOGV("AQI", "Computed AQI: %.0f from %.2f PM2.5 and %.2f PM10", aqi, pm2_5, pm10);
      return(aqi);
    update_interval: ${update_interval}