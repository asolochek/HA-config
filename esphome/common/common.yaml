substitutions:
  room: "Default Room"
  project_name: "ESPHome.Project"
  project_version: "1.0.0"
  log_level: "INFO"
  flash_write_interval: 5min


esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ${device_description}
  area: ${room}
  project:
    name: ${project_name}
    version: ${project_version}

external_components:
  - source:
      type: local
      path: components

#Include this block when migrating a config to using the shared config
# esphome:
#   on_boot:
#     - lambda: |-
#         id(my_ota).set_auth_password("newpass");
#
# ota:
#   platform: esphome
#   id: my_ota
#   password: <copied from old config>

preferences:
  flash_write_interval: ${flash_write_interval}

# Enable logging
logger:
  id: base_logger
  level: ${log_level}
  hardware_uart: UART0
  logs:
    component: ERROR
    i2c.arduino: INFO
    api.service: INFO
    api.connection: INFO
    esp32.preferences: INFO
    sensor.filter: INFO
    scheduler: INFO
    sensor: INFO
    light.addressable: INFO
    text.sensor: INFO
    esp32_rmt_led_strip: INFO
    neopixel: INFO


# Enable Home Assistant API
api:


ota:
  platform: esphome
  id: my_ota
  password: !secret ota_password


button:
  - platform: restart
    id: restart_button
    name: "Restart"
    entity_category: config


mdns:
  disabled: false


binary_sensor:
  - platform: status
    name: "Status"
    entity_category: diagnostic


sensor:
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    internal: true


text_sensor:
  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic

  - platform: template
    name: "Uptime"
    icon: mdi:clock-start
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }

time:
  - platform: sntp
    id: sntp_time
    timezone: America/Los_Angeles
    update_interval: 60min
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'

  - platform: homeassistant
    id: ha_time
