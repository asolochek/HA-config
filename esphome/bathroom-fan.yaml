substitutions:
  name: bathroom-fan
  friendly_name: Bathroom Fan
  hostname: fan-bathroom
  room: "Bathroom"
  device_description: "Bathroom Exhaust Fan"
  display_id: bathroom_fan_display
  log_level: INFO
  i2c_frequency: 100kHz


packages:
  device_base: !include common/feather_esp32s2_rev_tft.yaml
  temperature: !include common/sht4x.yaml
  tvoc: !include common/sgp30.yaml
  fonts: !include common/fonts.yaml
  colors: !include common/colors.yaml
  soil: !include 
    file: common/adafruit_soil_sensor.yaml
    vars:
      i2c_address: "0x36"
      dry_threshold: "40"
      moisture_min_value: "300"
  dry: !include common/soil_dry_indicator.yaml
  dp: !include common/dew_point.yaml


# wifi:
#   use_address: !remove
#   manual_ip:
#     static_ip: 10.3.1.72
#     gateway: 10.3.1.2
#     subnet: 255.255.0.0


logger:
  logs:
    graph: ERROR
    climate: ERROR
#    sensor: DEBUG
    sgp30: ERROR
    sht4x: ERROR
    uptime: ERROR
    number: WARN
    text_sensor: WARN


esphome:
  on_boot:
  - priority: 900
    then:
      - lambda: "pinMode(7, OUTPUT); digitalWrite(7, HIGH);"
  - priority: 100
    then:
      - lambda: |-
          id(fan_controller).set_stage1_trip(id(humidity_stage1_threshold).state);
          id(fan_controller).set_stage2_trip(id(humidity_stage2_threshold).state);
          id(fan_controller).update();


switch:
  - platform: gpio
    id: pir_ground
    restore_mode: ALWAYS_OFF
    pin: GPIO6

  - platform: template
    name: Debug Logging
    id: debug_logging
    icon: mdi:bug
    entity_category: config
    lambda: |-
      return id(fan_controller).get_debug();
    turn_on_action:
      lambda: |-
        id(fan_controller).set_debug(true);
    turn_off_action:
      lambda: |-
        id(fan_controller).set_debug(false);

  - platform: template
    id: controller_enable
    name: Controller Enable
    lambda: |-
      return id(fan_controller).get_controller_enabled();
    turn_on_action: 
      lambda: |-
        id(fan_controller).enable_controller();
    turn_off_action: 
      lambda: |-
        id(fan_controller).disable_controller();

#
# Controller
#
exhaust_fan:
  id: fan_controller
  temperature_sensor: temperature
  humidity_sensor: humidity
  external_temperature_sensor: baseline_temperature
  external_humidity_sensor: baseline_humidity
  min_humidity: 60
  idle_action:
    - number.set: 
        id: controller_zone_value
        value: 1
    - lambda: |-
        auto fan_call = id(bathroom_fan).make_call();
        fan_call.set_speed(id(fan_idle_speed).state * 10.24);
        fan_call.perform();
  stage1_action:
    - number.set: 
        id: controller_zone_value
        value: 2
    - lambda: |-
        auto fan_call = id(bathroom_fan).make_call();
        fan_call.set_speed(id(fan_low_speed).state * 10.24);
        fan_call.perform();
  stage2_action:
    - number.set: 
        id: controller_zone_value
        value: 3
    - lambda: |-
        auto fan_call = id(bathroom_fan).make_call();
        fan_call.set_speed(id(fan_high_speed).state * 10.24);
        fan_call.perform();


binary_sensor:
  - platform: gpio
    name: "Controller Power Button"
    id: a_button
    pin: 
      number: GPIO0
      mode: INPUT_PULLUP
      ignore_strapping_warning: true
    filters:
      - invert:
    on_press: 
      - lambda: |-
          auto fan_call = id(bathroom_fan).make_call();
          if(id(fan_controller).get_controller_enabled()) {
            id(fan_controller).disable_controller();
          }
          else {
            id(fan_controller).enable_controller();
            fan_call.set_state(true);
            fan_call.perform();
          }
          id(fan_controller).update();

    on_double_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - lambda: |-
            auto fan_call = id(bathroom_fan).make_call();
            auto zone_call = id(controller_zone_value).make_call();
            if(id(fan_controller).get_controller_enabled()) {
              id(fan_controller).disable_controller();
              fan_call.set_state(false);
              zone_call.set_value(0);
            }
            else {
              id(fan_controller).enable_controller();
              fan_call.set_state(true);              
            }
            fan_call.perform();
            zone_call.perform();

  - platform: gpio
    name: "Speed Up"
    id: b_button
    pin: 
      number: GPIO1
      mode: INPUT_PULLDOWN
    on_press:
      - lambda: |-
          auto fan_call = id(bathroom_fan).make_call();
          fan_call.set_speed(id(bathroom_fan).speed + 5*10.24);
          fan_call.perform();

  - platform: gpio
    name: "Speed Down"
    id: c_button
    pin: 
      number: GPIO2
      mode: INPUT_PULLDOWN
    on_press:
      - lambda: |-
          auto fan_call = id(bathroom_fan).make_call();
          fan_call.set_speed(id(bathroom_fan).speed - 5*10.24);
          fan_call.perform();


  - platform: gpio
    id: bathroom_motion
    name: Bathroom Motion
    pin:
      number: GPIO9
      mode:
        input: true
        pullup: false
      inverted: false
    internal: false


#
# Input Values
#

number:
  - platform: template
    id: controller_zone_value
    min_value: 0
    max_value: 3
    step: 1
    internal: true
    set_action:
      - sensor.template.publish:
          id: controller_zone
          state: !lambda return x;

  - platform: template
    name: Stage 1 Trip
    id: humidity_stage1_threshold
    icon: mdi:cloud-percent
    unit_of_measurement: "%"
    optimistic: True
    restore_value: True
    initial_value: 80
    min_value: 30
    max_value: 100
    step: 1
    mode: box
    # lambda: |-
    #   return id(fan_controller).get_stage1_trip_rh();
    on_value:
      lambda: |-
        id(fan_controller).set_stage1_trip(x);

  - platform: template
    name: Stage 2 Trip
    id: humidity_stage2_threshold
    icon: mdi:cloud-percent
    unit_of_measurement: "%"
    optimistic: True
    restore_value: True
    initial_value: 90
    min_value: 30
    max_value: 100
    step: 1
    mode: box
    # lambda: |-
    #   return id(fan_controller).get_stage2_trip_rh();
    on_value:
      lambda: |-
        id(fan_controller).set_stage2_trip(x);

  - platform: template
    name: Clear Baseline Offset
    id: baseline_offset
    icon: mdi:cloud-percent-outline
    optimistic: True
    restore_value: True
    initial_value: 5
    min_value: -20
    max_value: 20
    unit_of_measurement: "%"
    step: 1
    mode: box
    on_value:
      lambda: |-
        id(fan_controller).set_baseline_offset(x);

  - platform: template
    name: Hysterisis
    id: hysteresis
    icon: mdi:hysteresis
    optimistic: True
    restore_value: True
    initial_value: 4
    min_value: 0
    max_value: 20
    unit_of_measurement: "%"
    step: 1
    mode: box
    on_value:
      lambda: |-
        id(fan_controller).set_hysteresis(x);

  - platform: template
    name: Fan Idle Speed
    id: fan_idle_speed
    icon: mdi:fan-speed-1
    optimistic: True
    restore_value: True
    initial_value: 25
    min_value: 15
    max_value: 50
    step: 1
    mode: box
    on_value:
      lambda: |-
        id(fan_controller).update();

  - platform: template
    name: Fan Low Speed
    id: fan_low_speed
    icon: mdi:fan-speed-2
    optimistic: True
    restore_value: True
    initial_value: 50
    min_value: 40
    max_value: 70
    step: 1
    mode: box
    on_value:
      lambda: |-
        id(fan_controller).update();
 
  - platform: template
    name: Fan High Speed
    id: fan_high_speed
    icon: mdi:fan-speed-3
    optimistic: True
    restore_value: True
    initial_value: 80
    min_value: 50
    max_value: 100
    step: 1
    mode: box
    on_value:
      lambda: |-
        id(fan_controller).update();



sensor:
  - id: !extend sht4x_sensor
    temperature:
      filters:
        - offset: -2.0
    humidity:
      filters:
        - offset: +3.0

  - platform: template
    name: Controller Zone
    id: controller_zone
    icon: mdi:state-machine
    accuracy_decimals: 0

  - platform: homeassistant
    name: Baseline Humidity
    id: baseline_humidity
    icon: mdi:cloud-percent
    entity_id: sensor.living_room_humidity
    unit_of_measurement: "%"
    internal: false
    filters:
      - lambda: |-
          return isnan(x) ? 60.0 : x;

  - platform: homeassistant
    name: Baseline Temperature
    id: baseline_temperature
    icon: mdi:thermometer
    entity_id: sensor.living_room_temperature
    unit_of_measurement: "Â°F"
    internal: false
    filters:
      - lambda: |-
          return isnan(x) ? 70.0 : x;

  - platform: template
    name: Clear Threshold Pct
    id: clear_threshold_pct
    icon: mdi:cloud-percent
    unit_of_measurement: "%"
    internal: false
    update_interval: 4s
    accuracy_decimals: 1
    lambda: |-
      return id(fan_controller).get_stage1_clear();

  - platform: template
    name: Stage 1 Threshold Pct
    id: stage1_threshold_pct
    unit_of_measurement: "%"
    icon: mdi:cloud-percent
    internal: false
    update_interval: 4s
    accuracy_decimals: 1
    lambda: |-
      return id(fan_controller).get_stage1_trip();

  - platform: template
    name: Stage 2 Threshold Pct
    id: stage2_threshold_pct
    unit_of_measurement: "%"
    icon: mdi:cloud-percent
    internal: false
    update_interval: 4s
    accuracy_decimals: 1
    lambda: |-
      return id(fan_controller).get_stage2_trip();


output:
  - platform: ledc
    pin: GPIO17
    id: fan_pwm_high
    frequency: 25000Hz
  - platform: ledc
    pin: GPIO18
    id: fan_pwm_low
    frequency: 25000Hz
  - platform: ledc
    pin: GPIO16
    id: fan_enable
    frequency: 25000Hz


fan:
  - platform: hbridge
    id: bathroom_fan
    name: "Bathroom Fan"
    pin_a: fan_pwm_low
    pin_b: fan_pwm_high
    enable_pin: fan_enable
    decay_mode: slow
    restore_mode: RESTORE_DEFAULT_ON
    speed_count: 1024
    on_turn_on:
      - number.set: 
          id: controller_zone_value
          value: 1
      - lambda: |-
          id(fan_controller).enable_controller();
    on_turn_off:
      - number.set: 
          id: controller_zone_value
          value: 0
      - lambda: |-
          id(fan_controller).disable_controller();


color:
  - id: color_humidity
    hex: 'fffb46'
  - id: color_clear_threshold
    hex: '0080ff'
  - id: color_stage1_threshold
    hex: 'ee7826'
  - id: color_stage2_threshold
    hex: 'e82e18'


graph:
  - id: humidity_graph
    duration: 40min
    width: 190
    height: 60
    border: false
    traces:
      - sensor: humidity
        color: color_humidity
        continuous: true
      - sensor: clear_threshold_pct
        line_type: DASHED
        color: color_clear_threshold
        continuous: true
      - sensor: stage1_threshold_pct
        line_type: DASHED
        color: color_stage1_threshold
        continuous: true
      - sensor: stage2_threshold_pct
        line_type: DASHED
        color: color_stage2_threshold
        continuous: true

display:
  - id: !extend ${display_id}
    lambda: |-
      auto fan_speed = id(bathroom_fan).state ? float(id(bathroom_fan).speed) / 1024.0 * 100 : 0;

      it.printf(4, 3, id(futura50), "%.0f%%", fan_speed);
      it.printf(178, 0, id(futura28), "%.0f", c_to_f(float(id(temperature).state)));
      it.circle(219, 12, 4);
      it.circle(219, 12, 3);
      it.printf(224, 0, id(futura28), "F");
      it.printf(178, 36, id(futura28), Color(yellow), "%.0f%%", id(humidity).state);
      if (id(fan_controller).get_controller_enabled() == false) {
        it.printf(0, 110, id(futura24), "Controller Off");
      }
      else {
        it.graph(50, 75, id(humidity_graph));
        it.printf(0, 60, id(futura24), Color(red), "%.0f", id(fan_controller).get_stage2_trip());
        it.printf(0, 85, id(futura24), Color(orange), "%.0f", id(fan_controller).get_stage1_trip());
        it.printf(0, 110, id(futura24), Color(blue), "%.0f", id(fan_controller).get_stage1_clear());
      }
